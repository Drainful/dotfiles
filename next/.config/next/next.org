#+TITLE: Next Browser Configuration
#+CREATOR: Adrian Fullmer
#+PROPERTY: header-args :tangle init.lisp

* Keybindings
Definition of a keymap for personal bindings.
#+BEGIN_SRC lisp :noweb tangle
  <<utilities>>

  (in-package :next-user)

  (defvar *my-keymap* (make-keymap) "My keymap.")

  (defmacro keys (&body bindings)
    `(define-key :keymap *my-keymap*
       ,@bindings))

  (keys
    "y y" #'next/web-mode:copy 
    "p" #'next/web-mode:paste 
    "b" #'switch-buffer
    "s-TAB" #'switch-buffer-previous
    "b" #'switch-buffer
    ", w" #'delete-current-buffer)
#+END_SRC
* Interface
** COMMENT Zoom
#+BEGIN_SRC lisp
  (in-package :next-user)

  (defun current-zoom ()
    (next:current-zoom-ratio (next:current-buffer)))

  (define-parenscript %set-zoom ((zoom 1))
    (ps:lisp (setf (current-zoom-ratio next::%buffer) zoom))
    (setf (ps:chain document body style zoom) (ps:lisp zoom)))

  (defun set-zoom (zoom)
    (%set-zoom :zoom zoom))

  (defun toggle-zoom ()
    (let ((zoom (current-zoom)))
      (if (> zoom 1.5)
          (set-zoom 1.0)
          (set-zoom 2.0))))

  (keys
   ", z" #'toggle-zoom)

  (defun set-zoom-1 ()
    (set-zoom 1.0))
#+END_SRC
** COMMENT Scroll
#+BEGIN_SRC lisp
  (in-package :next-user)

  (define-parenscript %scroll-to-top--scaled ((scale (current-zoom)))
    (ps:chain window (scroll-by 0 (* (ps:lisp scale)
                                     (- (ps:chain document body scroll-height))))))

  (define-parenscript %scroll-to-bottom--scaled
      ((scale (current-zoom)))
    (ps:chain window (scroll-by 0 (* (ps:lisp scale)
                                     (ps:chain document body scroll-height)))))

  (define-command scroll-to-top--scaled ()
    (%scroll-to-top--scaled))

  (define-command scroll-to-bottom--scaled ()
    (%scroll-to-bottom--scaled))

  (keys
    "G" #'scroll-to-bottom--scaled
    "g g" #'scroll-to-top--scaled)

#+END_SRC
*** COMMENT Scroll Scaled
#+BEGIN_SRC lisp
  (in-package :next-user)

  (defun scroll--scaled (v h)
    (cond (v (next::%scroll-up
              :scroll-distance (* v (next:current-zoom-ratio (next:current-buffer)))))
          (h (next::%scroll-right
              :scroll-distance (* h (next:current-zoom-ratio (next:current-buffer)))))))

  (define-command scroll-up--scaled ()
    (scroll--scaled (scroll-distance (next:current-buffer))
                    nil))

  (define-command scroll-down--scaled ()
    (scroll--scaled (- (scroll-distance (next:current-buffer)))
                    nil))

  (define-command scroll-right--scaled ()
    (scroll--scaled nil
                    (horizontal-scroll-distance (next:current-buffer))))

  (define-command scroll-left--scaled ()
    (scroll--scaled nil
                    (- (horizontal-scroll-distance (next:current-buffer)))))
#+END_SRC
** COMMENT Hi Dpi
#+BEGIN_SRC lisp
  (in-package :next)

  (defun my-buffer-details (buffer)
    (setf (zoom-ratio-default buffer) 2.0)
    (unzoom-page :buffer buffer))

  (defun my-minibuffer-defaults (minibuffer)
    (setf
     (max-lines minibuffer) 30
     (minibuffer-line-height minibuffer) "1.1em"
     (minibuffer-font-size minibuffer) "1.1em"))

  (defun my-window-defaults (window)
    (setf
     (minibuffer-open-height window) 800))

  (define-command test ()
    (my-buffer-details (current-buffer)))

  (defun my-interface-defaults ()
    (add-hook buffer-make-hook #'my-buffer-details)
    (add-hook minibuffer-make-hook #'my-minibuffer-defaults)
    (add-hook window-make-hook #'my-window-defaults))

  (add-hook after-init-hook #'my-interface-defaults)
#+END_SRC
** COMMENT Link Hints
#+BEGIN_SRC lisp
  (in-package :next-user)

  ;; (hooks:remove-from-hook 'next:follow-hint-before-hook
  ;;                         #'set-zoom-1)
  ;; (hooks:remove-from-hook 'next:follow-hint-after-hook
  ;;                         #'next:unzoom-page)
#+END_SRC
* Preferences
#+BEGIN_SRC lisp
  (in-package :next-user)

  (defvar search-engines
    '(("default" . "https://google.com/search?hl=en&q=~a")
      ("go" . "https://duckduckgo.com/?q=~a")
      ("yt" . "https://www.youtube.com/results?search_query=~a")
      ("wp" . "https://en.wikipedia.org/w/index.php?search=~a")))

#+END_SRC
* Emacs Integration
** Evaluate in Emacs
#+BEGIN_SRC lisp
  (in-package :next-user)

  (defun eval-in-emacs (&rest s-exps)
    "Evaluate S-exps with `emacsclient'."
    (let ((s-exps-string
           (write-to-string
            `(progn ,@s-exps) :case :downcase)))
      (log:debug "Sending to Emacs: ~a" s-exps-string)
      (ignore-errors (uiop:run-program
                      (list "emacsclient" "--eval" s-exps-string)))))

#+END_SRC
** COMMENT Edit in Emacs
#+BEGIN_SRC lisp
(defun edit-str-with-emacs (str tempfile)
       "Dump the contents of str to the temporary file tempfile, then open tempfile
in Emacs for editing. Note that this call is synchronous!"
       ;; Dump the cell's contents to a tempfile
       (with-open-file (s tempfile :direction :output :if-exists :supersede)
         ;; Replace \n with literal newlines
         (format s "~a" str))
       ;; Open an emacs buffer pointed at the file
       (uiop:run-program `("emacsclient" ,tempfile) :output :string)
       ;; Read the file contents back in
       (with-open-file (s tempfile :direction :input)
         (let ((contents (make-string (file-length s))))
           (read-sequence contents s)
           contents)))
#+END_SRC
* External Programs
** Mpv
#+BEGIN_SRC lisp
  (in-package :next-user)

  (define-command play-video-in-current-page (&optional (buffer (current-buffer)))
    "Play video in the currently open buffer."
    (uiop:run-program (list "mpv" (url buffer))))

  (keys
   ", m" #'play-video-in-current-page)
#+END_SRC
* Modes
#+BEGIN_SRC lisp
  (in-package :next-user)

  (define-mode my-mode ()
    "Dummy mode for the custom key bindings in `*my-keymap*'."
    ((keymap-schemes :initform (list :emacs-map *my-keymap*
                                     :vi-normal *my-keymap*))))
#+END_SRC
* Initialization
** Buffer Class
#+BEGIN_SRC lisp
  (in-package :next-user)

  (defclass my-buffer (buffer)
    ((default-modes
         :initform (append
                    '(my-mode
                      vi-normal-mode)
                    (get-default 'buffer 'default-modes)))
     (scroll-distance :initform 400)
     (horizontal-scroll-distance :initform 200)))

  (setq *buffer-class* 'my-buffer)
#+END_SRC
** Remote Interface Class
#+BEGIN_SRC lisp
  (in-package :next-user)

  (defclass my-remote-interface (remote-interface)
    (;; (open-external-link-in-new-window-p :initform t)
     (search-engines :initform search-engines)))

  (setq *remote-interface-class* 'my-remote-interface)
#+END_SRC
* Start Swank
#+BEGIN_SRC lisp
  (start-swank)
#+END_SRC
* Utilities
#+BEGIN_SRC lisp :noweb-ref utilities :tangle no
(defmacro aif (test then &optional else)
  (let ((it test)) (if it then else)))
#+END_SRC
