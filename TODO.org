* Emacs
** appearance
a launch screen to replace the scratch buffer. (like that dave fellow)
** language tools
- Add Rust editing tools
** projects
*** Projectile
- Add flycheck file and #autosave# or whatever file to projectile exclusions
*** Nix Daemon
- Create a command to start a second daemon for nix project DONE
  - Name the daemon after the nix project DONE
  - some kind of daemon switching facility 
  - minimize startup time
  - Communicate through with daemon to create new frames etc.
  - Make the daemon buffer provide useful information
*** Lorri
- Lorri commands to watch and to refresh direnv bound to hotkeys DONE
- Lorri auto-watch on entering a project (if not already watching) DONE
- Eventually set up direnv auto-refresh?
*** Skeletor
- contribute the subdirectory feature, ~:subdir~ keyword.
- Make a completion source that uses nix packages list to select packages for a project.
- project skeletons set up for
  - Generic project with Nix and direnv (choose directory manually) DONE
  - Common Lisp DONE
  - C
  - C++
  - Rust
  - Prolog
** Launcher
I want the following features:
Simple macro to create launcher shortcuts
example usage:
#+BEGIN_SRC emacs-lisp
  (launcher-shortcuts
   firefox
   krita
   gimp
   (spotify :args "--force-device-scale-factor=2"
            :switch-to t)
   (wifi :shell-command "cool-retro-term"
         :args "-e nmtui"
         :switch-to t)
   (bluetooth :shell-command "blueman-manager"
              :before (lambda ()
                        (split-window-vertically)
                        (other-window 1))
              :switch-to t))
#+END_SRC

or add shortcuts manually like
#+BEGIN_SRC emacs-lisp
  (defun launcher/firefox
      (start-process-shell-command "firefox" nil "firefox"))
#+END_SRC

shortcuts are just defuns under ~launcher/~, the launch function simply
narrows the launch functions. Keep what metadata you need.

this is a good starting point, but eventually I want to parse .desktop
files to add shortcuts automatically. I can continue to add launcher
features over time in order to compete with those fancy gui launchers.
I imagine that it will become useful to others, so why not make a package?

The .desktop parser just outputs launch functions AKA shortcuts whose
properties can be overriden by ~launcher-shortcuts~.

Integrate with helm eventually.

INTEGEATE THIS WITH YOUR WORKSPACE THING! YES SO GOOD!
*** new 
super tab for workspaces
alt tab for buffers

even in x11 windows

achieve perfect symmetry between buffers and workspaces

quick launch eshell 1-9 on s-numbers?
esh 1-4, term 5.
rest of numbers for other bindings

brightness tick at 1%
** Workspaces
- All that's left to do is that alt-tab style thing perhaps.  This is
worth consolidating into a package. Think about how to provide a safe
interface to users: maybe do a pull request in exwm to add extra hooks
for that.
- rename select-workspace to read-workspace
** exwm
Remove extraneous information from the modelines of x11 window buffers
* Other
⠀⠀⠀⣴⣴⡤
⠀⣠⠀⢿⠇⡇⠀⠀⠀⠀⠀⠀⠀⢰⢷⡗
⠀⢶⢽⠿⣗⠀⠀⠀⠀⠀⠀⠀⠀⣼⡧⠂⠀⠀⣼⣷⡆
⠀⠀⣾⢶⠐⣱⠀⠀⠀⠀⠀⣤⣜⣻⣧⣲⣦⠤⣧⣿⠶
⠀⢀⣿⣿⣇⠀⠀⠀⠀⠀⠀⠛⠿⣿⣿⣷⣤⣄⡹⣿⣷
⠀⢸⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⢿⣿⣿⣿⣿⣿
⠀⠿⠃⠈⠿⠆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⠿⠿⠿

⠀⢀⢀⡀⠀⢀⣤⠀⠀⠀⠀⠀⠀⠀⡀⡀
⠀⣿⡟⡇⠀⠭⡋⠅⠀⠀⠀⠀⠀⢰⣟⢿
⠀⣹⡌⠀⠀⣨⣾⣷⣄⠀⠀⠀⠀⢈⠔⠌
⠰⣷⣿⡀⢐⢿⣿⣿⢻⠀⠀⠀⢠⣿⡿⡤⣴⠄⢀⣀⡀
⠘⣿⣿⠂⠈⢸⣿⣿⣸⠀⠀⠀⢘⣿⣿⣀⡠⣠⣺⣿⣷
⠀⣿⣿⡆⠀⢸⣿⣿⣾⡇⠀⣿⣿⣿⣿⣿⣗⣻⡻⠿⠁
⠀⣿⣿⡇⠀⢸⣿⣿⡇⠀⠀⠉⠉⠉⠉⠉⠉⠁
