* Emacs
** language tools
- Add Rust editing tools
** projects
*** Projectile
- Add flycheck file and #autosave# or whatever file to projectile exclusions
*** Lorri
- Lorri commands to watch and to refresh direnv bound to hotkeys DONE
- Lorri auto-watch on entering a project (if not already watching) DONE
- Eventually set up direnv auto-refresh?
*** Skeletor
- contribute the subdirectory feature, ~:subdir~ keyword.
- Make a completion source that uses nix packages list to select packages for a project.
- project skeletons set up for
  - Generic project with Nix and direnv (choose directory manually) DONE
  - Common Lisp DONE
  - C
  - C++
  - Rust
  - Prolog
** Launcher (MOSTLY DONE)
I want the following features:
Simple macro to create launcher shortcuts
example usage:
#+BEGIN_SRC emacs-lisp
  (launcher-shortcuts
   firefox
   krita
   gimp
   (spotify :args "--force-device-scale-factor=2"
            :switch-to t)
   (wifi :shell-command "cool-retro-term"
         :args "-e nmtui"
         :switch-to t)
   (bluetooth :shell-command "blueman-manager"
              :before (lambda ()
                        (split-window-vertically)
                        (other-window 1))
              :switch-to t))
#+END_SRC

or add shortcuts manually like
#+BEGIN_SRC emacs-lisp
  (defun launcher/firefox
      (start-process-shell-command "firefox" nil "firefox"))
#+END_SRC

shortcuts are just defuns under ~launcher/~, the launch function simply
narrows the launch functions. Keep what metadata you need.

this is a good starting point, but eventually I want to parse .desktop
files to add shortcuts automatically. I can continue to add launcher
features over time in order to compete with those fancy gui launchers.
I imagine that it will become useful to others, so why not make a package?

The .desktop parser just outputs launch functions AKA shortcuts whose
properties can be overriden by ~launcher-shortcuts~.
** Keybindings
- Bind leader to also be s-, so that you can access leader in helm buffers.
** Other 
Some way to minimize exwm's "fullscreen" windows.  Easiest way is to
just correct xrandr when switching from a fullscreen'd workspace.
* Other
⠀⠀⠀⣴⣴⡤
⠀⣠⠀⢿⠇⡇⠀⠀⠀⠀⠀⠀⠀⢰⢷⡗
⠀⢶⢽⠿⣗⠀⠀⠀⠀⠀⠀⠀⠀⣼⡧⠂⠀⠀⣼⣷⡆
⠀⠀⣾⢶⠐⣱⠀⠀⠀⠀⠀⣤⣜⣻⣧⣲⣦⠤⣧⣿⠶
⠀⢀⣿⣿⣇⠀⠀⠀⠀⠀⠀⠛⠿⣿⣿⣷⣤⣄⡹⣿⣷
⠀⢸⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⢿⣿⣿⣿⣿⣿
⠀⠿⠃⠈⠿⠆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⠿⠿⠿

⠀⢀⢀⡀⠀⢀⣤⠀⠀⠀⠀⠀⠀⠀⡀⡀
⠀⣿⡟⡇⠀⠭⡋⠅⠀⠀⠀⠀⠀⢰⣟⢿
⠀⣹⡌⠀⠀⣨⣾⣷⣄⠀⠀⠀⠀⢈⠔⠌
⠰⣷⣿⡀⢐⢿⣿⣿⢻⠀⠀⠀⢠⣿⡿⡤⣴⠄⢀⣀⡀
⠘⣿⣿⠂⠈⢸⣿⣿⣸⠀⠀⠀⢘⣿⣿⣀⡠⣠⣺⣿⣷
⠀⣿⣿⡆⠀⢸⣿⣿⣾⡇⠀⣿⣿⣿⣿⣿⣗⣻⡻⠿⠁
⠀⣿⣿⡇⠀⢸⣿⣿⡇⠀⠀⠉⠉⠉⠉⠉⠉⠁
